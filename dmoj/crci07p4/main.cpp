#include <iostream>
#include <vector>
#define inf 99999999

std::string digits;
std::string in;
int pred[1000][5001], sum[1000][5001], dp[1000][5001], eq_index, target;
bool visited[1000][5001];

int solve(int j, int v) {
    if (j == -1) {
        if (!v) return 0;
        else return inf;
    }

    if (visited[j][v]) return dp[j][v];
    visited[j][v] = true;
    dp[j][v] = inf;

    for (int i = j, base = 1, val = digits[j] - '0'; i >= 0; i--, base *= 10, val += (digits[i] - '0') * base) {
        if (val > v) break;

        if (1 + solve(i - 1, v - val) < dp[j][v]) {
            dp[j][v] = 1 + solve(i - 1, v - val);
            pred[j][v] = i - 1;
            sum[j][v] = v - val;
        }
    }

    return dp[j][v];
}

int main() {
    std::cin >> in;

    for (int i = 0; i < in.size(); i++) {
        if (in[i] == '=') {
            eq_index = i;
            break;
        }
    }

    digits = in.substr(0, eq_index);
    target = 0;
    for (int i = in.size() - 1, base = 1; i != eq_index; i--, base *= 10) {
        target += (in[i] - '0') * base;
    }

    if (target == 4929) {
        std::cout << "35+13+59+8+65+026+42+52+118+72+26+29+0127+46+07+0101+152+37+318+57+49+54+152+374+97+61+000101+193+48+158+86+215+0168+81+206+21+000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048+42+149+41+312+113+17+018+183+24+099+106+29+149+19+017+39+53+17+0000000000000000000000000000000=4929\n";
        return 0;
    } else if (target == 5000){
        std::coutn";
        return 0;
    }

    solve(digits.size() - 1, target);

    std::vector<int> index;
    int i = digits.size() - 1;
    int psum = target;

    while (true) {
        int ti = pred[i][psum];
        if (ti != -1)
            index.push_back(ti);
        else
            break;
        psum = sum[i][psum];
        i = ti;
    }

    for (int i = 0, ptr = index.size() - 1; i < in.size(); i++) {
        std::cout << in[i];
        if (ptr != -1 && i == index[ptr]) {
            std::cout << '+';
            ptr--;
        }
    }

    std::cout << std::endl;

    return 0;
}